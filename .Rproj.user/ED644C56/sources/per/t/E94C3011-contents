# 숫자형 벡터
x <- c(2,0,2,0,0,3,2,4)
x
# 문자형 벡터
y <- c('Hojin Choe', 'R programming', 'Male', 'sophomore', '2020-03-30')
y
# 두 벡터의 결합(1)
x <- 1:5
y <- 10:6
z <- c(x,y)
z
x
y
x <- 5:10
x1 <- x[1:3] # x 벡터에서 1에서 3번쨰 원소 추출
x2 <- c(x1,15,x[4]) 
x2

## 벡터 결합시 우선순위
## NULL < raw < logical < interger < double < complex < character < list <  expression

#숫자형 벡터와 문자열 벡터의 혼용
k <- c(1,2,"3","4")
k
is.numeric(k)  # k가 numeric(숫자형)인지 판단하는 함수
is.character(k) # k가 character(문자형)인지 판단하는 함수

#숫자형 벡터와 문자열 벡터 결합
x <- 1:3
y <- c("a", "b", "c")
z <- c(x,y)
z
is.numeric(z)
is.character(z)

# 숫자형 벡터와 논리형 벡터 결합
x <- 9:4
y <- c(TRUE,TRUE,FALSE)
z <- c(x,y)
z # TRUE/FALSE 가 1과 0으로 변환
is.numeric(z)
is.logical(z)
x <- y <- 1:3 # x와 y에 동시에 [1,2,3] 할당
x
y
z<-c(x,y)
z
x <- c("Hojin Choe", "R programming", "Male", "sophomore", "2020-03-30")

# 벡터 이름 원소 지정
names(x) <- c('name', 'course', 'gender', 'grade', 'date')
x
y <- c(a=10,b=6,c=9)
y
names(y)
x <- 1:50
# 객체의 길이 반환
# length() : 벡터, 행렬인 경우 원소의 개수, 데이터프레임인 경우 열의 개수 반환
length(x)
# NROW() : 벡터인 경우 원소의 개수, 행렬, 데이터프레임인 경우 행의 개수 반환
NROW(x)

x <- 1:3; y <- 2:4
length(x); length(y)
x; y
# 사칙연산(+,-,*,/)
# 벡터 vs 벡터
x + y
x - y
x*y
x/y
## 그 외 연산
## 나머지(remainder)
y %% x
# 몫(quotient)
y %/% x
# 멱승(exponent)
y ^x
# 벡터(n by 1) va 스칼라(1 by 1)
x*5  # 5를 x 의 길이만큼 재사용(반복) 후 곱 연산
x <- c(2,1,3,5,4); y <- c(2,3,4)
x
y
length(x); length(y)
# x의 길이가 5이고 y의 길이가 3이기 때문에 5를 맞추기 위헤
# y의 원소 중 1-2 번째 원소를 재사용
x + y
x / y
# 연산 우선 순위
 1:5 *3
1:(5*3) 
# 논리형 벡터
b1 <- c(TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
b2 <- c(FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE)
is.numeric(b1); is.numeric(b2)
is.logical(b1); is.logical(b2)
b3 <- b1 + b2
is.numeric(b3)
b3
b1 - b2
b1 * b2
b1/ b2

# 두 벡터의 비교 연산
x <- c(2, 4, 3, 10, 5, 9)
y <- c(3, 4, 6, 2, 10, 7)

x == y
x != y
x > y
x < y
x >= y
x <= y

# 비교 연산 시 두 벡터의 길이가 다른 경우
x <- 1:5; y <- 2:4
x == y
x != y
x > y
x < y
x >= y
x <= y

# 문자열 벡터 연산 (==, !=)
c1 <- letters[1:5]
# a-z로 구성된 벡터에서 1-2, 6-8 번째 원소 추출
c2 <- letters[c(1:2, 6:8)] 
c1
c2
c1 == c2
c1 != c2
c1 > c2

# 결측을 포함한 벡터
x <- c(1:10, c(NA, NA))
y <- c(NA, NA, 1:10)
x
y
is.na(x); is.na(y)
# 결측을 포함한 벡터의 계산
x + y
x - y
x / y
x * y
x > y
x < y

# NULL을 포함한 벡터 
x <- c(1, 2, 3, NULL, NULL, NULL) # 길이가 6?
length(x)
x

x <- c(1.2, 3.1, 4.2, 2.8, 3.3)
x[3] # x 원소 중 3 번째 원소 추출
# x 원소 중 2-3번째 원소 추출
x[2:3]
x[c(2,3)]
# x의 3 번째 원소 제거
x[-3]
# 맨 마지막 원소(5 번째) 제거
# 아래 script는 동일한 결과 출력
x[1:(length(x) - 1)]
x[-length(x)]

# 벡터를 이용한 인덱싱
# x 원소 중 1, 5번째 원소 추출
x[c(1, 5)] # c(1,5)는 벡터
v <- c(1,4)
x[v]
# 인덱스 번호 중복 가능
x[c(1, 2, 2, 4)]
# 원소 이름으로 인덱싱
# 원소 이름 지정
names(x) <- paste0("x", 1:length(x)) # 문자열 "x"와 숫자 1:5(벡터 길이)를 결합한 문자열 반환
x
x["x3"]
x[c("x2","x4")]

z <- c(5, 2, -3, 8)
# z의 원소 중 z의 제곱이 8보다 큰 원소 추출
w <- z[z^2 > 8]
w
z^2
idx <- z^2 > 8
idx
z[idx]

# 위 벡터 z 의 원소 중 z^2 > 8 인 원소의 값을 0으로 치환
z[idx] <- 0
z

# seq(): 수열 생성 함수
seq(
  from, # 시작값
  to,   # 끝값
  by    # 공차(증가치)
)

# 기타 인수
# length.out = n
#   - 생성하고자 하는 벡터의 길이가 n인 수열 생성
# along.with = 1:n 
#   - index가 1에서 n 까지 길이를 갖는 수열 생성

x <- seq(from=2,to=30,by=2)
x
# 간격이 꼭 정수가 아니어도 사용 가능
x <- seq(from = 0, to = 3, by = 0.2)
x
# by 대신 length.out 으로 생성된 수열의 길이 조정
x <- seq(from = -3, to = 3, length.out = 10)
x
# from, to 인수 없이 length.out=10 인 경우
seq(length.out = 10)
# by 대신 along.width 
seq(along.with=1:10)
seq(from=3,to=30,along.with=1:10)
seq(1, 5, along.with=1:10)
# 벡터 x에 seq() 함수 적용 시 1:length(x) 값 반환
x <- seq(7,10,length.out = 5)
x
seq(x)

# rep(): 벡터 또는 벡터의 개별 원소를 반복한 값 반환
rep(
  x, # 반복할 값이 저장된 벡터
  times, # 전체 벡터의 반복 횟수
  each # 개별 원소의 반복 횟수
)
x <- rep(4, 5) # 4를 5번 반복
x

# x <- c(1:3) 전체를 3번 반복한 벡터 반환
x <- c(1:3)
xr1 <- rep(x, times = 3)
xr1
xr1 <- rep(x,3)
xr1
# 벡터 x 의 각 원소를 4번씩 반복한 벡터 반환
xr2 <- rep(x, each = 4)
xr2
# 벡터 x 의 각 원소를 3번 반복하고 해당 벡터를 2회 반복
xr3 <- rep(x, each = 3, times = 2)
xr3

# 문자형 벡터의 반복
# 아래 sex 벡터의 각 원소를 2 번 반복하고 해당 벡터를 4회 반복
sex <- c("Male", "Female")
sexr <- rep(sex, each = 2, times = 4)
sexr
# rep.int() & rep_len(): rep() 함수의 simple 버전으로 속도(performance)가 요구되는 프로그래밍 시 사용
# 1:5 벡터를 3 번 반복
rep.int(1:5, 3)
rep(1:5,3)
# 불완전한 사이클로 벡터 반복
rep_len(1:5, length.out = 7)
rep(1:5, length.out = 7)
rep_len(1:5,7)

# subset(): 기존 필터링 방식과 비교할 때 NA를 처리하는 방식에서 차이를 보임
x <- c(6, 1:3, NA, NA, 12)
x
# 일반적 필터링 적용 
x[x > 5]
# subset() 함수 적용
subset(x, x > 5)

# which(): 한 벡터에서 특정 조건에 맞는 위치(인덱스)를 반환
# which(): 논리형 벡터를 인수로 받고 해당 논리형 벡터가 참인 index 반환
which(
  logical_vec # 논리형 벡터
)
x <- c(3, 8, 3, 1, 7)

# x의 원소값이 3인 index 반환
which(x == 3)
# x의 원소가 4보다 큰 원소의 index 반환
which(x > 4)
# 9월(Sep)과 12월(Dec)와 같은 원소 index
# month.abb: R 내장 벡터로 월 약어(Jan ~ Dec)를 저장한 문자열 벡터
which(month.abb == c("Sep", "Dec"))

# 조건을 만족하는 원소가 존재하지 않는다면?
x <- which(x > 9)
x

length(x) # 길이가 0인 벡터 반환 is.null(x) == TRUE ??
is.null(x) == TRUE

# 특정 조건 만족 여부를 확인 
# any(condition) -> 하나라도 condition을 만족하는 원소가 존재하는지 판단
# TRUE 또는 FALSE 값 반환
any(x > 9)

all(x > 10)
x

# setequal(X, Y): X와 Y가 동일한지 판단 ( X=Y)  → 논리값 TRUE 또는 FALSE 반환
x <- y <- c(1,9,7,3,6)
setequal(x,y)

# union(X, Y): X와 Y의 합집합 ( X∪Y)
y <- c(1,9,8,2,0,3)
union(x,y)

# intersect(X, Y): X와 Y의 교집합 (X∩Y)
intersect(x,y)

# setdiff(X, Y): X와 Y의 차집합 (X−Y)
setdiff(x,y)
setdiff(y,x)

# X %in% Y: X(기준)가 집합 Y의 원소인지 논리값 반환
x <- c("apple", "banana", "strawberry", "mango", "peach", "orange")
y <- c("strawberry", "orange", "mango")
x %in% y
y %in% x

x <- 1:3
y <- c(1, 3, 4)
x == y
all(x == y)
any(x == y)

# identical() 함수는 벡터가 갖는 데이터 타입의 동일성 까지 체크함
# 두 객체의 동일성 여부 테스트
identical(x, y)

x <- 1:5; y <- c(1, 2, 3, 4, 5)
x
y
all(x==y)
any(x==y)
identical(x,y)
typeof(x)
typeof(y)


# 리스트(list): (key, value) 형태로 데이터를 저장한 배열(벡터)
# 서로 다른 데이터 타입을 가진 객체를 원소로 가질 수 있는 벡터
# 예: 한 리스트 안에는 상이한 데이터 타입(숫자형, 문자형, 논리형 등)을 갖는 원소(객체)들을 포함할 수 있음

# 벡터로 위 record를 입력한 경우
vec <- c(`이름` = "김상자", `학번` = "202015115", 
         `점수` = 95, `등급` = "A-")
vec
typeof(vec)

# list 함수 사용 prototype
# list(name_1 = object_1, ..., name_m = object_m)

# name_1, ..., name_m: 리스트 원소 이름
# object_1, ..., object_m: 리스트 원소에 대응한 객체

# lst 객체 생성
lst <- list(`이름` = "김상자", 
            `학번` = "202015115", 
            `점수` = 95, 
            `등급` = "A-")
lst

typeof(lst)

# lst 내 객체의 데이터 타입 확인
# lapply(): lst 객체에 동일한 함수 적용 (추후 학습)
lapply(lst, typeof)

names(lst)
list("김상자","202015115","95","A-")

# 길이가 1이고 객체가 NULL인 리스트 생성
z <- vector(mode = "list",length = 4)
z

x <- list(name = c("A", "B", "C"), 
          salary = c(500, 450, 600), union = T)
x

# 리스트에 포함된 객체에 접근는 기본적으로 벡터의 색인 방법과 동일하게 색인 번호 또는 키(이름)을 통해 접근 가능
# 리스트에 포함된 모든 객체의 원소값을 쉽게 확인하는 함수는 unlist()임

lval <- unlist(x)
typeof(lval)
lval

# x$name을 통해 리스트 내 객체 접근
lst$학번
# x[[i]] 또는 x[[name]] 을 통해 리스트 내 객체 접근
lst[[2]]
lst[['학번']]
# x[i] 또는 x[name] 을 통해 리스트 내 부분 리스트 추출
lst[1]
lst['이름']

# 리스트 lst 에서 1 ~ 3 번째 까지 부분 리스트 추출
lst[1:3]
lst[c('학번','이름','점수')]

x
# salary에서 2-3번째 원소 추출
x$salary[2:3]
x[2]
x[[2]][1:3]

# 부분 리스트도 길이가 1인 리스트이므로, 
# 부분 리스트 내 객제 접근 시 리스트 접근이 선행
# x의 2번째 부분 리스트에서 첫 번째 객체의 2-3번째 원소 추출
x[2][[1]][2:3]

# 리스트의 길이 반환: 벡터와 마찬가지로 length() 함수 적용 가능
length(x)
length(lst)
length(x$name)

# 주어진 리스트 x에 새로운 원소를 x$new_obj <- value 명령어 형태로 추가
# 이미 존재하고 있는 리스트 원소 제거는 x$exist_obj <- NULL 형태로 제거
# 리스트 lst 에 5회 차 퀴즈 점수 추가
lst$quiz <- c(10, 8, 9, 9, 8)
lst
# 리스트 lst이 원소 quiz 제거
lst$quiz <- NULL
lst

# 벡터 색인을 이용해 원소 추가 가능
lst[[5]] <- c(10, 8, 9, 9, 8)
lst

# 부분 리스트 괄호에서도 색인 통해 추가/삭제 가능
lst[5] <- NULL
lst

# 여러 개의 리스트 동시 추가/삭제 가능
lst[5:9] <-  c(10, 8, 9, 9, 8)
lst

lst[5:9] <- NULL
lst

lst[c('quiz1','quiz2','quiz3','quiz4','quiz5')] <- c(10,8,9,9,8)
lst
lst[c(5,6,7,8,9)]<-c(10,8,9,9,8)
lst

# 리스트 lst와 x 결합
c(lst, x)

# 리스트 내 리스트 (재귀리스트) 만들기
kim <- list(id = "20153345", sex = "Male", score = 85, grade = "B+")
lee <- list(id = "20153348", sex = "Female", score = 75, grade = "B0")

gr <- list(kim=kim, lee=lee)
gr

lst[["퀴즈"]] <- list(quzi1 = 10, quiz2 = 9, quiz3 = 8)
lst
