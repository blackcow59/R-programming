# gap_minder dataset
gapm %>%
filter(iso == "KOR")
require(tidyverse)
# geom_ribbon() 예시
# gap_minder dataset
gapm %>%
filter(iso == "KOR") %>%
select(year, gdp_cap) %>%
ggplot(aes(x = year, y = gdp_cap)) +
geom_ribbon(aes(ymin = gdp_cap - 5000,
ymax = gdp_cap + 5000),
fill = 'gray',
alpha = 0.5) +
geom_line(size = 1.5,
color = 'black')
x <- sep(-3, 3, by = 0.01)
z <- dnorm(x)
x <- seq(-3, 3, by = 0.01)
z <- dnorm(x)
df_norm <- data.frame(x, z)
idx <- -1.2 < x & x < 0.7
df_area <- df_norm %>%
filter(idx)
expr <- bquote(P({-1.2 < Z} < 0.7) ==
.(sprintf("%.3f", pnorm(0.7) - pnorm(-1.2))))
# 각 geom 별로 다른 데이터 적용
ggplot() +
geom(data = df_norm,
aes(x = x, y = z), size = 1) +
geom_area(data = df_area,
aes(x = x, y = z),
fill = "red", alpha = 0.2) +
geom_text(aes(x = -1, y = 0.2,
label = paste(deparse(expr), collapes = "")),
parse = T, size = 5,
hjust = 0)
# 각 geom 별로 다른 데이터 적용
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1) +
geom_area(data = df_area,
aes(x = x, y = z),
fill = "red", alpha = 0.2) +
geom_text(aes(x = -1, y = 0.2,
label = paste(deparse(expr), collapes = "")),
parse = T, size = 5,
hjust = 0)
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1) +
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1)
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1)
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1) +
geom_area(data = df_area,
aes(x = x, y = z),
fill = "red", alpha = 0.2)
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1) +
geom_area(data = df_area,
aes(x = x, y = z),
fill = "red", alpha = 0.2) +
geom_text(aes(x = -1, y = 0.2,
label = paste(deparse(expr), collapes = "")),
parse = T, size = 5,
hjust = 0)
# 각 geom 별로 다른 데이터 적용
ggplot() +
geom_line(data = df_norm,
aes(x = x, y = z), size = 1) +
geom_area(data = df_area,
aes(x = x, y = z),
fill = "red", alpha = 0.2) +
geom_text(aes(x = -1, y = 0.2,
label = paste(deparse(expr), collapse = "")),
parse = T, size = 5,
hjust = 0)
p0 <- ggplot(data = diamonds, aes(x = carat))
p1 <- p0 + geom_histogram() +
labs(title = "bins, binwidth = default")
p2 <- p0 + geom_histogram(binwidth = 0.01) +
labs(title = "binwidth = 0.05")
p3 <- p0 + geom_histogram(bins = 150) +
labs(title = "bins = 150")
p4 <- ggplot(data = diamonds, aes(y = carat)) +
geom_histogram() + # y 축 기준으로 히스토그램 생성
labs(title = "Map to y (flipped)")
p1
p2
p3
p4
# iris 데이터셋. 변수: Sepal Length
p0 <- ggplot(data = iris, aes(x = Petal.Length))
p1 <- p0 +
geom_histogram(aes(fill = Species),
color = "white",
bins = 20,
alpha = 0.2) +
labs(title = "p1: Histograms of petal length: frequency")
p1 <- p0 +
geom_histogram(aes(fill = Species),
color = "white",
bins = 20,
alpha = 0.2) +
labs(title = "p1: Histograms of petal length: frequency"); p1
p2 <- p0 +
geom_histogram(aes(fill = Species,
y = ..density..), # y축을 밀도로 변경
color = "white", # 막대 테두리선 지정
alpha = 0.2,
bins = 20) +
labs(title = "p2: Histograms of petal length: density"); p2
# diamond dataset
p0 <- ggplot(data = diamonds,
aes(y = carat))
p0
p1 <- p0 +
geom_boxplot()
p1
p2 <- p0 +
geom_boxplot(aes(x = cut,
fill = cut))
p2
p3 <- p0 +
geom_boxplot(aes(x = cut,
fill = cut),
with = 0.5)
p3 <- p0 +
geom_boxplot(aes(x = cut,
fill = cut),
width = 0.5)
p3
p4 <- p0 +
geom_boxplot(aes(x = cut,
fill = color),
outlier.shape = 4,
outlier.color = "red")
p4
p0 <- ggplot(data = mpg)+
aes(x = class, y = cty)
p0
p1 <- p0 +
geom_boxplot(aes(fill = class),
outlier.shape = NA,
alpha = 0.1) +
geom_jitter(aes(color = class),
alpha = 0.5,
width = 0.2) +
labs(title w= "p1 : boxplot with jittered data points per eahc class (unordered)")
p1 <- p0 +
geom_boxplot(aes(fill = class),
outlier.shape = NA,
alpha = 0.1) +
geom_jitter(aes(color = class),
alpha = 0.5,
width = 0.2) +
labs(title = "p1 : boxplot with jittered data points per eahc class (unordered)")
p1
p2 <- mpg %>%
mutate(class = reorder(class, cty, median)) %>%
ggplot(aes(x = class, y = cty)) +
geom_boxplot(ase(fill = class),
outlier.shape = NA,
alpha = 0.1) +
geom_jitter(aes(color = class),
alpha = 0.5,
width = 0.2) +
labs(title = "p2 : orderd by median of cty for each car class")
p2 <- mpg %>%
mutate(class = reorder(class, cty, median)) %>%
ggplot(aes(x = class, y = cty)) +
geom_boxplot(aes(fill = class),
outlier.shape = NA,
alpha = 0.1) +
geom_jitter(aes(color = class),
alpha = 0.5,
width = 0.2) +
labs(title = "p2 : orderd by median of cty for each car class")
p2
p0 <- ggplot(data = diamonds) +
aes(x = carat, y = price)
p1 <- p0 +
geom_point(alpha = 0.2) +
geom_smooth() +
labs(title = "p1 : geom_smooth() default")
p1
p2 <- p0 +
geom_point(aes(color = color),
alpha = 0.2) +
geom_smooth(aes(color = color)) +
labs(title = "p2 : geom_smooth() for diffrent color groups")
Sys.time(p2)
system.time(p2)
source('C:/r-project/R-programming/script/R_programming_5.4.R', encoding = 'UTF-8', echo=TRUE)
p0 <- ggplot(data = diamonds) +
aes(x = carat, y = price)
p2 <- p0 +
geom_point(aes(color = color),
alpha = 0.2) +
geom_smooth(aes(color = color)) +
labs(title = "p2 : geom_smooth() for diffrent color groups")
p2
## 5.4.11.1 scale_size_* example
ggpoint +
geom_point(aes(sizs = population,
color = continent),
alpha = 0.3) +
scale_size_continuous(range = c(1, 20))
## 5.4.11.1 scale_size_* example
ggplot() +
geom_point(aes(sizs = population,
color = continent),
alpha = 0.3) +
scale_size_continuous(range = c(1, 20))
## 5.4.11.1 scale_size_* example
gppoint +
geom_point(aes(sizs = population,
color = continent),
alpha = 0.3) +
scale_size_continuous(range = c(1, 20))
## 5.4.11.1 scale_size_* example
gppoint +
geom_point(aes(size = population,
color = continent),
alpha = 0.3) +
scale_size_continuous(range = c(1, 20))
gppoint
## 5.4.11.1 scale_size_* example
gppoint +
geom_point(aes(size = population,
color = continent),
alpha = 0.3) +
scale_size_continuous(range = c(1, 20))
p0 <- ggplot(data = diamonds,
aes(y = carat))
p1 <- p0 + geom_boxplot(aes(x = color,
fill = color),
width = 0.5)
p1
p2 <- p1 +
coord_flip()
p2
gapm %>%
mutate(continent = gsub("(.+\\s)", "", region) %>%
factor) %>%
filter(year == 2015) %>%
ggplot(aes(x = life_expectancy, y = gdp_cap)) +
geom_point(aes(size = population,
color = continent),
alpha = 0.3) -> p1
p2 <- p1 +
guides(size = FALSE, # size 관련 guide(범례는 출력하지 않음)
color = guide_legend(
title = "Contient", # 범례 제목 변경
title.theme = element_text(face = "bold"), # 범례 제목 폰트 굵은체
override.aes = list(size = 5) # 범례 표시 점의 크기를 5로
)) +
theme(legend.position = "top") # 범례 위치를 맨 위로 조정
p2
p2 <- p1 +
guides(size = FALSE, # size 관련 guide(범례는 출력하지 않음)
color = guide_legend(
title = "Contient", # 범례 제목 변경
title.theme = element_text(face = "bold"), # 범례 제목 폰트 굵은체
override.aes = list(size = 5) # 범례 표시 점의 크기를 5로
)) +
theme(legend.position = "top") # 범례 위치를 맨 위로 조정
p2 <- p1 +
guides(size = FALSE, # size 관련 guide(범례는 출력하지 않음)
color = guide_legend(
title = "Contient",
title.theme = element_text(face = "bold"),
override.aes = list(size = 5)
)) +
theme(legend.position = "top") # 범례 위치를 맨 위로 조정
p2 <- p1 +
guides(size = FALSE, # size 관련 guide(범례는 출력하지 않음)
color = guide_legend(
title = "Contient",
title.theme = element_text(face = "bold"),
override.aes = list(size = 5)
)) +
theme(legend.position = "top")
p2
require(tidyverse)
require(readxl)
getwd()
# 데이터 전처리
# 데이터 불러오기
covid <- read_delim("docs/Exercise2/covid19-cases-20200601.txt", delim = "\t")
# 데이터 전처리
# 데이터 불러오기
covid19 <- read_delim("docs/Exercise2/covid19-cases-20200601.txt", delim = "\t")
country <- read_excel("docs/Exercise2/country_info.xlsx")
county_pubhealth <- read_csv("docs/Exercise2/country_pubhealth.csv")
glimpse(covid19)
glimpse(country)
country_pubhealth <- read_csv("docs/Exercise2/country_pubhealth.csv")
rm(list = county_pubhealth)
rm(list = "county_pubhealth")
glimpse(country_pubhealth)
covid_full <- covid19 %>%
filter(iso_code != "OWID_WRL",
data >= as.Date("2020-03-01") &
date <= as.Date("2020-05-31"))
covid_full <- covid19 %>%
filter(iso_code != "OWID_WRL",
date >= as.Date("2020-03-01") &
date <= as.Date("2020-05-31"))
glimpse(covid_full)
# 2. Join : covid19를 기준으로 나머지 두 데이터셋 결합
covid_full <- covid_full %>%
left_join(country, by = "iso_code") %>%
left_join(country_pubhealth, by = c("location"))
glimpse(covid_full)
# 3. 대륙 변수 생성
covid_full <- covid_full %>%
mutate(continent = gsub("(.+\\s)", "", region)) %>%
factor
# 3. 대륙 변수 생성
covid_full <- covid_full %>%
mutate(continent = gsub("(.+\\s)", "", region) %>%
factor)
# 4. 케이스, 사망자 수 관련 변수를 이용해 100만명 당 확진자 수 및 사망수 계산
covid_full <- covid_full %>%
mutate_at(vars(matches("cases|deaths")),
list(per_million = ~ ./population * 10^6))
glimpse(covid_full)
# 5. 2020년 5월 31일 기준 총 확진자 수가 2000명 이상인 국가만 추출
# 각 국가별로 grouping을 한 후 total_case의 최댓값이 1000명을 초과한 경우만 추출
covid_full <- covid_full %>%
group_by(country) %>%
filter(max(total_cases) > 1000)
# 5. 2020년 5월 31일 기준 총 확진자 수가 2000명 이상인 국가만 추출
# 각 국가별로 grouping을 한 후 total_case의 최댓값이 1000명을 초과한 경우만 추출
covid_full <- covid_full %>%
group_by(location) %>%
filter(max(total_cases) > 1000)
glimpse(covid_full)
# 위에서 location 에 대한 grouping이 유지가 되고 있음
# 각 국가별 첫 번째 행이고 그 첫 번째 행이 결측이면 0 값을 대체하고
# 아니면 원래 관측값을 반환
covid_full <- covid_full %>%
mutate(total_tests = ifelse(row_number() == 1 &
is.na(first(total_tests)),
0, total_tests)) %>%
fill(total_tests, .direction = "down") %>%
ungroup
glimpse(covid_full)
# 7. "_tests"가 포함된 변수들에 대해 인구 천 명당 검사 수 계산(변수이름은 기존 변수명 마지막에 "_per_thousand"을 추가)
# 4 번과 유사
covid_full <- covid_full %>%
mutate_at(vars(contains("_tests")),
list(per_thousand = ~ ./population * 10^3))
covid_full <- covid_full %>%
select(iso_code, data, location, continent, population,
matches("case|deaths|tests"))
covid_full <- covid_full %>%
select(iso_code, date, location, continent, population,
matches("case|deaths|tests"))
glimpse(covid_full)
covid_full
view(covid_full)
install.packages("tidyverse")
require(tidyverse)
install.packages("ggplot2")
install.packages("ggplot2")
require(tidyverse)
### 4.4 dplyr 패키지
# dplyr 은 tidyverse 에서 데이터 전처리를 담당하는 패키지로 데이터 전처리 과정을 쉽고 빠르게 수행할 수 있는 함수로 구성된 패키지임
require(tidyverse)
# base R 문법적용
print(head(iris, 4))
# %>% 연산자 이용
iris %>% head(4) %>% print
# setosa 종에 해당하는 변수들의 평균 계산
apply(iris[iris$Species == "setosa", -5], 2, mean)
# tidyverse 의 pipe 연산자 이용
iris %>%
filter(Species == "setosa") %>%
select(-Species) %>%
summarise_all(mean)
# 제조사가 audi 또는 volkwagen 이고 고속 연비가 30 miles/gallon 인 차량만 추출
mpg %>%
filter(manufacturer == "audi" | manufacturer == "volkswagen",
hwy >= 30)
# arrange() 함수 사용
arrange(mpg, cty)
mpg %>% arrange(cty)
mpg %>% arrange(cty, desc(class))
identical(mpg_sortb, mpg_sortt)
# select() 함수 사용
mpg %>% select(1:4, 8)
mpg %>% select(c(manufacturer, model, displ, year, cty))
mpg %>%
select(manufacturer, model, displ, year, cty) %>%
glimpse
# 제조사(manufacturer), 모델명(model), 배기량(displ), 제조년도(year), 시내연비(cty) 만 추출
# select() 따옴표 없이 변수명 입력
mpg %>%
select(manufacturer, model, displ, year, cty) %>%
glimpse
# : 연산자로 변수 범위 지정
mpg %>%
select(manufacturer:year, cty) %>%
glimpse
# 조금 더 간결하게 (':'와'-' 연산 조합)
mpg %>%
select(-cyl:-drv, -hwy:-class) %>%
glimpse
# 동일한 기능 : - 는 괄호로 묶을 수 있음
mpg %>%
select(-(cyl:drv), -(hwy:class)) %>%
glimpse
# select() 함수를 이용해 변수명 변경 가능
mpg %>%
select(city_mpg = cty) %>%
glimpse
rm(list = ls())
a <- 3; b <- 10
a + b
a - b
a * b
a / b
a %% b
a %/% b
a^b
h1 <- c("R is not too dificult")
nchar(h1)
h1 <- c("R is not too difficult.")
nchar(h1)
rm(list=ls())
# 현재 작업공간(workspace)에 저장되어있는 모든 R 객체(objcets)를 확인할 수 있는 스크립트를 작성
getwd()
# 현재 작업공간(workspace)에 저장되어있는 모든 R 객체(objcets)를 확인할 수 있는 스크립트를 작성
ls()
# 현재 작업공간에 저장되어 있는 모든 R 객체를 삭제하는 스크립트
rm(list = ls())
require(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
require(tidyverse)
install.packages("readxl")
install.packages("readxl")
# 현재 작업폴더(working directory)를 확인하는 스크립트
geget()
# 현재 작업폴더(working directory)를 확인하는 스크립트
getwd
# 현재 작업폴더(working directory)를 확인하는 스크립트
getwd()
# 현재 작업폴더 내 존재하는 파일을 확인하는 스크립트
dir()
# R 작업공간에서 폴더를 생선하는 함수를 통해 final_exam_practice 폴더 생성
dir.create("final_exam_practice")
# R 작업공간에서 폴더를 생선하는 함수를 통해 final_exam_practice 폴더 생성
dir.create("final_exam_practice")
# 현재 작업폴더(working directory)를 확인하는 스크립트
getwd()
# 작업폴더를 final_exam_practice로 변경
setwd("/final_exam_practice")
# 작업폴더를 final_exam_practice로 변경
setwd("/final_exam_practice/")
# 작업폴더를 final_exam_practice로 변경
setwd("final_exam_practice")
# 현재 작업폴더(working directory)를 확인하는 스크립트
getwd()
set.seed(20200618)
# 평균이 4이고 분산이 9인 정규분포에서 200개의 난수를 생성 후 x라는 객체에 저장
x <- rnorm(200,4,9)
x
# e라는 객체에 평균이0이고 분산이2인 서로 독립이고 동일한 정규분포(i.i.d)200개에서 분포의 개수만큼 생성한 난수 저장
e <- rnorm(200,0,squar(2))
# e라는 객체에 평균이0이고 분산이2인 서로 독립이고 동일한 정규분포(i.i.d)200개에서 분포의 개수만큼 생성한 난수 저장
e <- rnorm(200,0,sqart(2))
# e라는 객체에 평균이0이고 분산이2인 서로 독립이고 동일한 정규분포(i.i.d)200개에서 분포의 개수만큼 생성한 난수 저장
e <- rnorm(200,0,sqrt(2))
# 위에서 생성한 x와 e를 활용해 yi = 1 + 0.6xi + ei 결과를 y에 저장하기 위한 스크립트
y = 1 + 0.6x + e
# 위에서 생성한 x와 e를 활용해 yi = 1 + 0.6xi + ei 결과를 y에 저장하기 위한 스크립트
y = 1 + 0.6*x + e
y
# x와 y에 대한 산점도를 생성하는 스크립트
plot(y ~ x)
# x를 이용해 행렬 X를 생성
X <- matrix(data = c(rep(1,length(x)),x), ncol = 2)
X
# X와 y를 이용해 (XtX)-1Xty의 계산 결과를 bhat에 저장
bhat <- solve(t(X) %*% X) %*% t(X) %*% y
bhat
# x와 y에 대한 산점도를 생성하는 스크립트
plot(y ~ x)
# 평균이 4이고 분산이 9인 정규분포에서 200개의 난수를 생성 후 x라는 객체에 저장
x <- rnorm(200,4,sqrt(9))
x
# e라는 객체에 평균이0이고 분산이2인 서로 독립이고 동일한 정규분포(i.i.d)200개에서 분포의 개수만큼 생성한 난수 저장
e <- rnorm(200,0,sqrt(2))
# 위에서 생성한 x와 e를 활용해 yi = 1 + 0.6xi + ei 결과를 y에 저장하기 위한 스크립트
y = 1 + 0.6*x + e
y
# x와 y에 대한 산점도를 생성하는 스크립트
plot(y ~ x)
# x를 이용해 행렬 X를 생성
X <- matrix(data = c(rep(1,length(x)),x), ncol = 2)
trimws(set.seed(100))
source('C:/r-project/R-programming/script/R_programming_example.R', encoding = 'UTF-8', echo=TRUE)
